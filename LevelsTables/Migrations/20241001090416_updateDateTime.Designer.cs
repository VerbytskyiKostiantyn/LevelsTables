// <auto-generated />
using System;
using LevelsTables.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LevelsTables.Migrations
{
    [DbContext(typeof(LevelsDbContext))]
    [Migration("20241001090416_updateDateTime")]
    partial class updateDateTime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AlisonicLevels.Models.Calibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Level")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TankId")
                        .HasColumnType("int");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("modificator")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ratio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("timeOfUpload")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TankId");

                    b.ToTable("Calibrations");
                });

            modelBuilder.Entity("Levels.Models.Tank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Alert_Level")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalProbeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FuelID")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxVolume")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProbeSerial")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Probetype")
                        .HasColumnType("int");

                    b.Property<decimal?>("Product_zero")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StationID")
                        .HasColumnType("int");

                    b.Property<int>("TankNumber")
                        .HasColumnType("int");

                    b.Property<string>("TankUID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Water_zero")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Tanks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Address = "Вулиця 1",
                            Alert_Level = 75000m,
                            Description = "Основний резервуар для зберігання продуктів 1",
                            ExternalProbeId = "PROB001",
                            FuelID = 1,
                            MaxVolume = 500000m,
                            Name = "Резервуар 1",
                            ProbeSerial = "PR001",
                            Probetype = 0,
                            Product_zero = 20000m,
                            StationID = 101,
                            TankNumber = 1,
                            TankUID = "T001",
                            Water_zero = 15000m
                        },
                        new
                        {
                            Id = 2,
                            Active = false,
                            Address = "Вулиця 2",
                            Alert_Level = 60000m,
                            Description = "Допоміжний резервуар для зберігання продуктів Б",
                            ExternalProbeId = "PROB002",
                            FuelID = 2,
                            MaxVolume = 300000m,
                            Name = "Резервуар 2",
                            ProbeSerial = "PR002",
                            Probetype = 1,
                            Product_zero = 15000m,
                            StationID = 102,
                            TankNumber = 2,
                            TankUID = "T002",
                            Water_zero = 10000m
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Address = "Вулиця 3",
                            Alert_Level = 80000m,
                            Description = "Експериментальний резервуар для тестування нових продуктів",
                            ExternalProbeId = "PROB003",
                            FuelID = 3,
                            MaxVolume = 400000m,
                            Name = "Резервуар 3",
                            ProbeSerial = "PR003",
                            Probetype = 2,
                            Product_zero = 25000m,
                            StationID = 103,
                            TankNumber = 3,
                            TankUID = "T003",
                            Water_zero = 18000m
                        });
                });

            modelBuilder.Entity("AlisonicLevels.Models.Calibration", b =>
                {
                    b.HasOne("Levels.Models.Tank", "Tank")
                        .WithMany("Calibrations")
                        .HasForeignKey("TankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tank");
                });

            modelBuilder.Entity("Levels.Models.Tank", b =>
                {
                    b.Navigation("Calibrations");
                });
#pragma warning restore 612, 618
        }
    }
}
